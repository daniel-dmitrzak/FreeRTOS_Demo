#!/usr/bin/env python
# -*- coding: CP1250 -*-
#
# generated by wxGlade 0.6.8 (standalone edition) on Thu Oct 17 18:23:06 2013
#

import wx
import serial
import os

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

ser = serial.Serial()

class MyFrame3(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame3.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.RESIZE_BORDER | wx.NO_BORDER | wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Ustawienia portu COM"))
        self.choice_1 = wx.Choice(self.panel_1, wx.ID_ANY, choices=ports) # Dziêki choices=ports mo¿na wybraæ port COM z listy po lewej stronie okna
        self.button_1 = wx.Button(self.panel_1, wx.ID_ANY, _("Polacz"))
        self.static_line_10 = wx.StaticLine(self.panel_1, wx.ID_ANY, style=wx.LI_VERTICAL)
        self.label_5 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Diody"))
        self.panel_2 = wx.Panel(self.panel_1, wx.ID_ANY)
        self.button_23 = wx.ToggleButton(self.panel_1, wx.ID_ANY, _("LED3"))
        self.button_24 = wx.ToggleButton(self.panel_1, wx.ID_ANY, _("LED4"))
        self.button_25 = wx.ToggleButton(self.panel_1, wx.ID_ANY, _("LED5"))
        self.button_26 = wx.ToggleButton(self.panel_1, wx.ID_ANY, _("LED6"))
        self.button_27 = wx.ToggleButton(self.panel_1, wx.ID_ANY, _("LED7"))
        self.button_28 = wx.ToggleButton(self.panel_1, wx.ID_ANY, _("LED8"))
        self.button_29 = wx.ToggleButton(self.panel_1, wx.ID_ANY, _("LED9"))
        self.button_30 = wx.ToggleButton(self.panel_1, wx.ID_ANY, _("LED10"))
        self.static_line_11 = wx.StaticLine(self.panel_1, wx.ID_ANY, style=wx.LI_VERTICAL)
        self.label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Temperatura"))
        self.text_ctrl_5 = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.button_2 = wx.Button(self.panel_1, wx.ID_ANY, _("Odczyt"))
        self.static_line_12 = wx.StaticLine(self.panel_1, wx.ID_ANY, style=wx.LI_VERTICAL)
        self.label_6 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Tekst"))
        self.text_ctrl_3 = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER | wx.TE_MULTILINE)
        self.button_3 = wx.Button(self.panel_1, wx.ID_ANY, _("Wyslij"))
        self.text_ctrl_4 = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER | wx.TE_MULTILINE | wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.changePort, self.button_1)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED0, self.button_23)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED1, self.button_24)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED2, self.button_25)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED3, self.button_26)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED4, self.button_27)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED5, self.button_28)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED6, self.button_29)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED7, self.button_30)
        self.Bind(wx.EVT_BUTTON, self.readTemp, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.sendString, self.button_3)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame3.__set_properties
        self.SetTitle(_("STM32 Demo"))
        self.SetSize((804, 189))
        self.text_ctrl_3.SetMinSize((170, 35))
        self.text_ctrl_4.SetMinSize((170, 35))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame3.__do_layout
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(6, 2, 0, 0)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        self.text_ctrl_3.SetMaxLength(62) # Ustawia maksymaln¹ d³ugoœæ tekstu na 62 znaki
        sizer_2.Add(self.label_1, 0, wx.TOP | wx.BOTTOM, 20)
        sizer_2.Add(self.choice_1, 0, wx.BOTTOM, 10)
        sizer_2.Add(self.button_1, 0, 0, 0)
        sizer_1.Add(sizer_2, 1, wx.LEFT | wx.ALIGN_CENTER_HORIZONTAL, 10)
        sizer_1.Add(self.static_line_10, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.label_5, 0, wx.TOP | wx.BOTTOM, 20)
        grid_sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.button_23, 0, 0, 0)
        grid_sizer_1.Add(self.button_24, 0, wx.LEFT, 3)
        grid_sizer_1.Add(self.button_25, 0, 0, 0)
        grid_sizer_1.Add(self.button_26, 0, wx.LEFT, 3)
        grid_sizer_1.Add(self.button_27, 0, 0, 0)
        grid_sizer_1.Add(self.button_28, 0, wx.LEFT, 3)
        grid_sizer_1.Add(self.button_29, 0, wx.BOTTOM, 20)
        grid_sizer_1.Add(self.button_30, 0, wx.LEFT, 3)
        sizer_1.Add(grid_sizer_1, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_1.Add(self.static_line_11, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)
        sizer_4.Add(self.label_3, 0, wx.TOP, 20)
        sizer_4.Add(self.text_ctrl_5, 0, wx.TOP, 10)
        sizer_4.Add(self.button_2, 0, wx.TOP, 10)
        sizer_1.Add(sizer_4, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_1.Add(self.static_line_12, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)
        sizer_7.Add(self.label_6, 0, wx.TOP, 20)
        sizer_7.Add(self.text_ctrl_3, 0, wx.RIGHT | wx.TOP | wx.EXPAND, 10)
        sizer_7.Add(self.button_3, 0, wx.TOP | wx.BOTTOM, 5)
        sizer_7.Add(self.text_ctrl_4, 0, wx.RIGHT | wx.EXPAND, 10)
        sizer_1.Add(sizer_7, 1, wx.ALIGN_CENTER_HORIZONTAL, 1)
        self.panel_1.SetSizer(sizer_1)
        sizer_5.Add(self.panel_1, 1, 0, 0)
        self.SetSizer(sizer_5)
        self.Layout()
        self.Centre()
        # end wxGlade

    def changePort(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser # deklarowanie globalnej zmiennej ser
        choice = self.choice_1.GetSelection() # zapisanie wyboru z listy portów COM do zmiennej
        ser = serial.Serial(ports[choice]) # otwarcie portu COM 


    def toggleLED0(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject() # pobranie objektu w tym przypadku przycisku
        if(button.GetValue() == 0): # sprawdzenie wartoœci przycisku 
            ser.write(chr(0x20)) # jezeli wartoœæ wynosi 0 czyli przycisk jest w pozycji wylaczonej to wysy³a kod wylaczenia diody
        else:
            ser.write(chr(0x10)) # jezeli wartoœæ wynosi 1 czyli przycisk jest w pozycji wlaczonej to wysy³a kod za³¹czenia diody

    # Tak samo wygl¹da obs³uga pozosta³ych przycisków. Zmienia siê tylko numer diody.
    def toggleLED1(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x21)) 
        else:
            ser.write(chr(0x11))
            
    def toggleLED2(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x22))
        else:
            ser.write(chr(0x12))
            
    def toggleLED3(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x23))
        else:
            ser.write(chr(0x13))
            
    def toggleLED4(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x24))
        else:
            ser.write(chr(0x14))

    def toggleLED5(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x25))
        else:
            ser.write(chr(0x15))
            
    def toggleLED6(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x26))
        else:
            ser.write(chr(0x16))
            
    def toggleLED7(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x27))
        else:
            ser.write(chr(0x17))

        
    def readTemp(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        vts25 = 149 # Zmienna kalibracji. Jest to wartoœæ pomiaru dla temperatury 25 st.
        avgslope = 4.3 # Typowa krzywizna funkcji mV(temp). Mo¿na j¹ odczytaæ z noty katalogowej uk³adu
        ser.write(chr(0x80)) # Wys³anie kodu pomiaru temp
        resp = ser.read(3) # Odczytanie trzech bajtów z portu COM
        if(resp[0] == chr(0x80)): # Sprawdzenie czy zosta³y odebrane w³aœciwe dane
            vts= ord(resp[1]) + (ord(resp[2])*256) # Resp[1] to ni¿szy bajt wartoœci pomiaru, a resp[2] wy¿szy
            # Aby otrzymaæ 16-bitow¹ liczbê, bajt wy¿szy nale¿y pomno¿yæ przez 256 i dodaæ do ni¿szego
            temp = ((vts25-vts)/avgslope) + 25 # Obliczenie temperatury. Wzór pochodzi z STM32F3xx Reference Manual
            self.text_ctrl_5.SetValue(str(temp)) # Wyœwietlenie temperatury w polu tekstowym
            
    def sendString(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        string = self.text_ctrl_3.GetString(0, -1) # Pobranie stringu z pola tekstowego
        ser.write(chr(0x40) + chr(len(string)) + string) # Wys³anie go do STM32 poprzedzaj¹c kodem polecenia i jego d³ugoœci¹
        if(ser.read(1) == chr(0x40)): # Sprawdzenie czy odpowiedŸ dotyczy stringu
            strLen = ord(ser.read(1)) # Odczytanie bajtu d³ugoœci
            stringin = ser.read(strLen) # Odczytanie samego stringu
            self.text_ctrl_4.SetValue(stringin) # Wyœwietlenie w polu tekstowym
            

def listPorts():
    # Windows
    if os.name == 'nt':
        # Szukaj dostêpnych portów COM
        dost = []
        for i in range(10): # Przeszukuje tylko pierwsze 10 portów. Znacznie zmniejsza to czas operacji
            try:
                s = serial.Serial(i) # Spróbuj otworzyæ port o numerze i
                dost.append('COM'+str(i + 1)) # Je¿eli siê powiedzie to dodaj jego nazwê do listy dost
                s.close() # Zamknij port
            except serial.SerialException:
                pass # Jezeli siê nie powiedzie to pomiñ port
            except ValueError:
                pass
        return dost # Zwróæ listê
    else:
        # Mac / Linux
        return [port[0] for port in list_ports.comports()] # Systemy Mac i GNU/Linux maj¹ osobn¹ funkcjê do sprawdzania dostêpnych portów     

ports = listPorts() 

# end of class MyFrame3
if __name__ == "__main__":
    gettext.install("app")
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_4 = MyFrame3(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_4)
    frame_4.Show()
    app.MainLoop()
